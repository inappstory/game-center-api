// how to create an npm package https://itnext.io/step-by-step-building-and-publishing-an-npm-typescript-package-44fe7164964c
{
    "extends": "@tsconfig/recommended/tsconfig.json",
    "compilerOptions": {
        // https://www.typescriptlang.org/tsconfig#lib
        // TypeScript includes a default set of type definitions for built-in JS APIs (like Math), as well as type definitions for things found in browser environments (like document). TypeScript also includes APIs for newer JS features matching the target you specify; for example the definition for Map is available if target is ES6 or newer.
        "lib": ["esnext", "dom", "dom.iterable"],
        "jsx": "react",
        "target": "esnext", // We want to compile to es5 since we want to build a package with browser compatibility.
        //      "module": "commonjs", // Use commonjs for compatibility.
        "module": "commonjs",
        "declaration": true, // When you build packages, this should be true. Typescript will then also export type definitions together with the compiled javascript code so the package can be used with both Typescript and Javascript.
        "outDir": "./lib", // The javascript will be compiled to the lib folder.
        "strict": true,
        "strictNullChecks": true,
        "paths": {
            //      "~/*": ["./src/*"]
        }
    },
    //    "include": ["src"], // All source files in the src folder
    "include": ["src/**/*"],
    "exclude": ["node_modules", "**/__tests__/*", "lib/**/*"] // We donâ€™t want to transpile node_modules, or tests since these are only used during development.
}
